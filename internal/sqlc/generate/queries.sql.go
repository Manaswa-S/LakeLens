// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkIfEPassOnly = `-- name: CheckIfEPassOnly :one
SELECT
    users.user_id
FROM users
WHERE NOT EXISTS (
    SELECT 1 FROM goauth WHERE users.user_id = goauth.user_id
)
AND users.email = $1
`

func (q *Queries) CheckIfEPassOnly(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, checkIfEPassOnly, email)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getCredentials = `-- name: GetCredentials :one
SELECT 
    credentials.key_id,
    credentials.key,
    credentials.region
FROM credentials 
WHERE lake_id = $1
`

type GetCredentialsRow struct {
	KeyID  string
	Key    string
	Region string
}

func (q *Queries) GetCredentials(ctx context.Context, lakeID int64) (GetCredentialsRow, error) {
	row := q.db.QueryRow(ctx, getCredentials, lakeID)
	var i GetCredentialsRow
	err := row.Scan(&i.KeyID, &i.Key, &i.Region)
	return i, err
}

const getGoogleID = `-- name: GetGoogleID :one
SELECT
    goauth.auth_id,
    goauth.email,
    goauth.id
FROM goauth
WHERE goauth.user_id = $1
`

type GetGoogleIDRow struct {
	AuthID int64
	Email  string
	ID     pgtype.Text
}

func (q *Queries) GetGoogleID(ctx context.Context, userID int64) (GetGoogleIDRow, error) {
	row := q.db.QueryRow(ctx, getGoogleID, userID)
	var i GetGoogleIDRow
	err := row.Scan(&i.AuthID, &i.Email, &i.ID)
	return i, err
}

const getLakeData = `-- name: GetLakeData :one
SELECT 
    lakes.name,
    lakes.region,
    lakes.ptype
FROM lakes 
WHERE lakes.lake_id = $1
`

type GetLakeDataRow struct {
	Name   string
	Region string
	Ptype  string
}

func (q *Queries) GetLakeData(ctx context.Context, lakeID int64) (GetLakeDataRow, error) {
	row := q.db.QueryRow(ctx, getLakeData, lakeID)
	var i GetLakeDataRow
	err := row.Scan(&i.Name, &i.Region, &i.Ptype)
	return i, err
}

const getLocationData = `-- name: GetLocationData :one
SELECT 
    locations.loc_id,
    locations.lake_id,
    locations.bucket_name,
    locations.user_id
FROM locations 
WHERE loc_id = $1
`

type GetLocationDataRow struct {
	LocID      int64
	LakeID     int64
	BucketName string
	UserID     int64
}

func (q *Queries) GetLocationData(ctx context.Context, locID int64) (GetLocationDataRow, error) {
	row := q.db.QueryRow(ctx, getLocationData, locID)
	var i GetLocationDataRow
	err := row.Scan(
		&i.LocID,
		&i.LakeID,
		&i.BucketName,
		&i.UserID,
	)
	return i, err
}

const getPassForUserID = `-- name: GetPassForUserID :one
SELECT 
    users.password
FROM users 
WHERE users.user_id = $1
`

func (q *Queries) GetPassForUserID(ctx context.Context, userID int64) (string, error) {
	row := q.db.QueryRow(ctx, getPassForUserID, userID)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserData = `-- name: GetUserData :one
SELECT 
    users.confirmed,
    users.user_uuid
FROM users 
WHERE users.user_id = $1
`

type GetUserDataRow struct {
	Confirmed bool
	UserUuid  pgtype.UUID
}

func (q *Queries) GetUserData(ctx context.Context, userID int64) (GetUserDataRow, error) {
	row := q.db.QueryRow(ctx, getUserData, userID)
	var i GetUserDataRow
	err := row.Scan(&i.Confirmed, &i.UserUuid)
	return i, err
}

const getUserFromEmail = `-- name: GetUserFromEmail :one
SELECT 
    users.user_id,
    users.password,
    users.confirmed,
    users.user_uuid
FROM users 
WHERE users.email = $1
`

type GetUserFromEmailRow struct {
	UserID    int64
	Password  string
	Confirmed bool
	UserUuid  pgtype.UUID
}

func (q *Queries) GetUserFromEmail(ctx context.Context, email string) (GetUserFromEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserFromEmail, email)
	var i GetUserFromEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Password,
		&i.Confirmed,
		&i.UserUuid,
	)
	return i, err
}

const insertNewCredentails = `-- name: InsertNewCredentails :exec
INSERT INTO credentials (lake_id, key_id, key, region)
VALUES ($1, $2, $3, $4)
`

type InsertNewCredentailsParams struct {
	LakeID int64
	KeyID  string
	Key    string
	Region string
}

func (q *Queries) InsertNewCredentails(ctx context.Context, arg InsertNewCredentailsParams) error {
	_, err := q.db.Exec(ctx, insertNewCredentails,
		arg.LakeID,
		arg.KeyID,
		arg.Key,
		arg.Region,
	)
	return err
}

const insertNewGOAuth = `-- name: InsertNewGOAuth :exec
INSERT INTO goauth (user_id, email, name, picture, id)
VALUES ($1, $2, $3, $4, $5)
`

type InsertNewGOAuthParams struct {
	UserID  int64
	Email   string
	Name    pgtype.Text
	Picture pgtype.Text
	ID      pgtype.Text
}

func (q *Queries) InsertNewGOAuth(ctx context.Context, arg InsertNewGOAuthParams) error {
	_, err := q.db.Exec(ctx, insertNewGOAuth,
		arg.UserID,
		arg.Email,
		arg.Name,
		arg.Picture,
		arg.ID,
	)
	return err
}

const insertNewLake = `-- name: InsertNewLake :one
INSERT INTO lakes (user_id, name, region, ptype)
VALUES ($1, $2, $3, $4)
RETURNING lake_id
`

type InsertNewLakeParams struct {
	UserID int64
	Name   string
	Region string
	Ptype  string
}

func (q *Queries) InsertNewLake(ctx context.Context, arg InsertNewLakeParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertNewLake,
		arg.UserID,
		arg.Name,
		arg.Region,
		arg.Ptype,
	)
	var lake_id int64
	err := row.Scan(&lake_id)
	return lake_id, err
}

const insertNewUser = `-- name: InsertNewUser :one
INSERT INTO users (email, password) 
VALUES ($1, $2)
RETURNING users.user_id
`

type InsertNewUserParams struct {
	Email    string
	Password string
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertNewUser, arg.Email, arg.Password)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const updatePass = `-- name: UpdatePass :exec
UPDATE users
SET password = $2
WHERE user_id = $1
`

type UpdatePassParams struct {
	UserID   int64
	Password string
}

func (q *Queries) UpdatePass(ctx context.Context, arg UpdatePassParams) error {
	_, err := q.db.Exec(ctx, updatePass, arg.UserID, arg.Password)
	return err
}
