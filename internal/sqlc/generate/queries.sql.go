// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"
)

const getCredentials = `-- name: GetCredentials :one
SELECT 
    credentials.key_id,
    credentials.key,
    credentials.region
FROM credentials 
WHERE lake_id = $1
`

type GetCredentialsRow struct {
	KeyID  string
	Key    string
	Region string
}

func (q *Queries) GetCredentials(ctx context.Context, lakeID int64) (GetCredentialsRow, error) {
	row := q.db.QueryRow(ctx, getCredentials, lakeID)
	var i GetCredentialsRow
	err := row.Scan(&i.KeyID, &i.Key, &i.Region)
	return i, err
}

const getLakeIDfromLocID = `-- name: GetLakeIDfromLocID :one
SELECT 
    locations.lake_id
FROM locations 
WHERE loc_id = $1
`

func (q *Queries) GetLakeIDfromLocID(ctx context.Context, locID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getLakeIDfromLocID, locID)
	var lake_id int64
	err := row.Scan(&lake_id)
	return lake_id, err
}

const insertNewCredentails = `-- name: InsertNewCredentails :exec
INSERT INTO credentials (lake_id, key_id, key, region)
VALUES ($1, $2, $3, $4)
`

type InsertNewCredentailsParams struct {
	LakeID int64
	KeyID  string
	Key    string
	Region string
}

func (q *Queries) InsertNewCredentails(ctx context.Context, arg InsertNewCredentailsParams) error {
	_, err := q.db.Exec(ctx, insertNewCredentails,
		arg.LakeID,
		arg.KeyID,
		arg.Key,
		arg.Region,
	)
	return err
}

const insertNewLake = `-- name: InsertNewLake :one
INSERT INTO lakes (user_id, name, region)
VALUES ($1, $2, $3)
RETURNING lake_id
`

type InsertNewLakeParams struct {
	UserID int64
	Name   string
	Region string
}

func (q *Queries) InsertNewLake(ctx context.Context, arg InsertNewLakeParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertNewLake, arg.UserID, arg.Name, arg.Region)
	var lake_id int64
	err := row.Scan(&lake_id)
	return lake_id, err
}

const insertNewUser = `-- name: InsertNewUser :exec
INSERT INTO users (email, password) 
VALUES ($1, $2)
`

type InsertNewUserParams struct {
	Email    string
	Password string
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) error {
	_, err := q.db.Exec(ctx, insertNewUser, arg.Email, arg.Password)
	return err
}
