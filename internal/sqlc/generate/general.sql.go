// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: general.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const accDetails = `-- name: AccDetails :one
SELECT 
    users.user_id,
    users.email,
    users.confirmed,
    users.created_at,
    users.user_uuid,
    users.auth_type::TEXT as auth_type
FROM users
WHERE users.user_id = $1
`

type AccDetailsRow struct {
	UserID    int64
	Email     string
	Confirmed bool
	CreatedAt pgtype.Timestamptz
	UserUuid  pgtype.UUID
	AuthType  string
}

func (q *Queries) AccDetails(ctx context.Context, userID int64) (AccDetailsRow, error) {
	row := q.db.QueryRow(ctx, accDetails, userID)
	var i AccDetailsRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Confirmed,
		&i.CreatedAt,
		&i.UserUuid,
		&i.AuthType,
	)
	return i, err
}

const checkIfEPAuth = `-- name: CheckIfEPAuth :one
SELECT
    epauth.auth_id
FROM epauth
WHERE epauth.email = $1
`

func (q *Queries) CheckIfEPAuth(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, checkIfEPAuth, email)
	var auth_id int64
	err := row.Scan(&auth_id)
	return auth_id, err
}

const deleteLake = `-- name: DeleteLake :exec
DELETE 
FROM lakes
WHERE lakes.lake_id = $2
AND lakes.user_id = $1
`

type DeleteLakeParams struct {
	UserID int64
	LakeID int64
}

func (q *Queries) DeleteLake(ctx context.Context, arg DeleteLakeParams) error {
	_, err := q.db.Exec(ctx, deleteLake, arg.UserID, arg.LakeID)
	return err
}

const deleteLoc = `-- name: DeleteLoc :exec
DELETE
FROM locations
WHERE locations.loc_id = $2
AND locations.user_id = $1
`

type DeleteLocParams struct {
	UserID int64
	LocID  int64
}

func (q *Queries) DeleteLoc(ctx context.Context, arg DeleteLocParams) error {
	_, err := q.db.Exec(ctx, deleteLoc, arg.UserID, arg.LocID)
	return err
}

const getEPAuthPass = `-- name: GetEPAuthPass :one
SELECT
    epauth.password
FROM epauth
WHERE epauth.user_id = $1
`

func (q *Queries) GetEPAuthPass(ctx context.Context, userID int64) (string, error) {
	row := q.db.QueryRow(ctx, getEPAuthPass, userID)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getEPDetails = `-- name: GetEPDetails :one
SELECT
    epauth.auth_id,
    epauth.email,
    epauth.name,
    epauth.picture
FROM epauth
WHERE epauth.user_id = $1
`

type GetEPDetailsRow struct {
	AuthID  int64
	Email   string
	Name    pgtype.Text
	Picture pgtype.Text
}

func (q *Queries) GetEPDetails(ctx context.Context, userID int64) (GetEPDetailsRow, error) {
	row := q.db.QueryRow(ctx, getEPDetails, userID)
	var i GetEPDetailsRow
	err := row.Scan(
		&i.AuthID,
		&i.Email,
		&i.Name,
		&i.Picture,
	)
	return i, err
}

const getGODetails = `-- name: GetGODetails :one
SELECT
    goauth.auth_id,
    goauth.email,
    goauth.name,
    goauth.picture,
    goauth.id
FROM goauth
WHERE goauth.user_id = $1
`

type GetGODetailsRow struct {
	AuthID  int64
	Email   string
	Name    pgtype.Text
	Picture pgtype.Text
	ID      pgtype.Text
}

func (q *Queries) GetGODetails(ctx context.Context, userID int64) (GetGODetailsRow, error) {
	row := q.db.QueryRow(ctx, getGODetails, userID)
	var i GetGODetailsRow
	err := row.Scan(
		&i.AuthID,
		&i.Email,
		&i.Name,
		&i.Picture,
		&i.ID,
	)
	return i, err
}

const getGoogleID = `-- name: GetGoogleID :one
SELECT
    goauth.auth_id,
    goauth.email,
    goauth.id
FROM goauth
WHERE goauth.user_id = $1
`

type GetGoogleIDRow struct {
	AuthID int64
	Email  string
	ID     pgtype.Text
}

func (q *Queries) GetGoogleID(ctx context.Context, userID int64) (GetGoogleIDRow, error) {
	row := q.db.QueryRow(ctx, getGoogleID, userID)
	var i GetGoogleIDRow
	err := row.Scan(&i.AuthID, &i.Email, &i.ID)
	return i, err
}

const getLakeDataForUserID = `-- name: GetLakeDataForUserID :one
SELECT 
    lakes.user_id,
    lakes.name,
    lakes.region,
    lakes.ptype,
    lakes.created_at
FROM lakes 
WHERE lakes.lake_id = $2
AND lakes.user_id = $1
`

type GetLakeDataForUserIDParams struct {
	UserID int64
	LakeID int64
}

type GetLakeDataForUserIDRow struct {
	UserID    int64
	Name      string
	Region    string
	Ptype     string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) GetLakeDataForUserID(ctx context.Context, arg GetLakeDataForUserIDParams) (GetLakeDataForUserIDRow, error) {
	row := q.db.QueryRow(ctx, getLakeDataForUserID, arg.UserID, arg.LakeID)
	var i GetLakeDataForUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Region,
		&i.Ptype,
		&i.CreatedAt,
	)
	return i, err
}

const getLakesList = `-- name: GetLakesList :many
SELECT
    lakes.lake_id,
    lakes.name,
    lakes.region,
    lakes.created_at,
    lakes.ptype
FROM lakes
WHERE lakes.user_id = $1
`

type GetLakesListRow struct {
	LakeID    int64
	Name      string
	Region    string
	CreatedAt pgtype.Timestamptz
	Ptype     string
}

func (q *Queries) GetLakesList(ctx context.Context, userID int64) ([]GetLakesListRow, error) {
	rows, err := q.db.Query(ctx, getLakesList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLakesListRow
	for rows.Next() {
		var i GetLakesListRow
		if err := rows.Scan(
			&i.LakeID,
			&i.Name,
			&i.Region,
			&i.CreatedAt,
			&i.Ptype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocsList = `-- name: GetLocsList :many
SELECT
    locations.loc_id,
    locations.created_at,
    locations.bucket_name,
    locations.lake_id
FROM locations
WHERE locations.user_id = $1
`

type GetLocsListRow struct {
	LocID      int64
	CreatedAt  pgtype.Timestamptz
	BucketName string
	LakeID     int64
}

func (q *Queries) GetLocsList(ctx context.Context, userID int64) ([]GetLocsListRow, error) {
	rows, err := q.db.Query(ctx, getLocsList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLocsListRow
	for rows.Next() {
		var i GetLocsListRow
		if err := rows.Scan(
			&i.LocID,
			&i.CreatedAt,
			&i.BucketName,
			&i.LakeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocsListForLake = `-- name: GetLocsListForLake :many
SELECT
    locations.loc_id,
    locations.created_at,
    locations.bucket_name
FROM locations
WHERE locations.user_id = $1 
AND locations.lake_id = $2
`

type GetLocsListForLakeParams struct {
	UserID int64
	LakeID int64
}

type GetLocsListForLakeRow struct {
	LocID      int64
	CreatedAt  pgtype.Timestamptz
	BucketName string
}

func (q *Queries) GetLocsListForLake(ctx context.Context, arg GetLocsListForLakeParams) ([]GetLocsListForLakeRow, error) {
	rows, err := q.db.Query(ctx, getLocsListForLake, arg.UserID, arg.LakeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLocsListForLakeRow
	for rows.Next() {
		var i GetLocsListForLakeRow
		if err := rows.Scan(&i.LocID, &i.CreatedAt, &i.BucketName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSettings = `-- name: GetSettings :one
SELECT
    settings.set_id,
    settings.last_updated,
    settings.advmeta,
    settings.cmptview,
    settings.rfrshint,
    settings.notif,
    settings.theme,
    settings.fontsz,
    settings.tooltps,
    settings.shortcuts
FROM settings
WHERE settings.user_id = $1
`

type GetSettingsRow struct {
	SetID       int64
	LastUpdated pgtype.Timestamptz
	Advmeta     bool
	Cmptview    bool
	Rfrshint    int16
	Notif       bool
	Theme       string
	Fontsz      int16
	Tooltps     bool
	Shortcuts   bool
}

func (q *Queries) GetSettings(ctx context.Context, userID int64) (GetSettingsRow, error) {
	row := q.db.QueryRow(ctx, getSettings, userID)
	var i GetSettingsRow
	err := row.Scan(
		&i.SetID,
		&i.LastUpdated,
		&i.Advmeta,
		&i.Cmptview,
		&i.Rfrshint,
		&i.Notif,
		&i.Theme,
		&i.Fontsz,
		&i.Tooltps,
		&i.Shortcuts,
	)
	return i, err
}

const getUserData = `-- name: GetUserData :one
SELECT 
    users.confirmed,
    users.user_uuid
FROM users 
WHERE users.user_id = $1
`

type GetUserDataRow struct {
	Confirmed bool
	UserUuid  pgtype.UUID
}

func (q *Queries) GetUserData(ctx context.Context, userID int64) (GetUserDataRow, error) {
	row := q.db.QueryRow(ctx, getUserData, userID)
	var i GetUserDataRow
	err := row.Scan(&i.Confirmed, &i.UserUuid)
	return i, err
}

const getUserFromEmail = `-- name: GetUserFromEmail :one
SELECT 
    users.user_id,
    users.confirmed,
    users.user_uuid
FROM users 
WHERE users.email = $1
`

type GetUserFromEmailRow struct {
	UserID    int64
	Confirmed bool
	UserUuid  pgtype.UUID
}

func (q *Queries) GetUserFromEmail(ctx context.Context, email string) (GetUserFromEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserFromEmail, email)
	var i GetUserFromEmailRow
	err := row.Scan(&i.UserID, &i.Confirmed, &i.UserUuid)
	return i, err
}

const insertNewEPAuth = `-- name: InsertNewEPAuth :exec
INSERT INTO epauth (user_id, email, password, name, picture)
VALUES ($1, $2, $3, $4, $5)
`

type InsertNewEPAuthParams struct {
	UserID   int64
	Email    string
	Password string
	Name     pgtype.Text
	Picture  pgtype.Text
}

func (q *Queries) InsertNewEPAuth(ctx context.Context, arg InsertNewEPAuthParams) error {
	_, err := q.db.Exec(ctx, insertNewEPAuth,
		arg.UserID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Picture,
	)
	return err
}

const insertNewGOAuth = `-- name: InsertNewGOAuth :exec
INSERT INTO goauth (user_id, email, name, picture, id)
VALUES ($1, $2, $3, $4, $5)
`

type InsertNewGOAuthParams struct {
	UserID  int64
	Email   string
	Name    pgtype.Text
	Picture pgtype.Text
	ID      pgtype.Text
}

func (q *Queries) InsertNewGOAuth(ctx context.Context, arg InsertNewGOAuthParams) error {
	_, err := q.db.Exec(ctx, insertNewGOAuth,
		arg.UserID,
		arg.Email,
		arg.Name,
		arg.Picture,
		arg.ID,
	)
	return err
}

const insertNewScan = `-- name: InsertNewScan :one
INSERT INTO scans (lake_id, loc_id)
VALUES ($1, $2)
RETURNING scan_id
`

type InsertNewScanParams struct {
	LakeID int64
	LocID  int64
}

func (q *Queries) InsertNewScan(ctx context.Context, arg InsertNewScanParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertNewScan, arg.LakeID, arg.LocID)
	var scan_id int64
	err := row.Scan(&scan_id)
	return scan_id, err
}

const insertNewSettings = `-- name: InsertNewSettings :exec
INSERT INTO settings (user_id)
VALUES ($1)
`

func (q *Queries) InsertNewSettings(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, insertNewSettings, userID)
	return err
}

const insertNewUser = `-- name: InsertNewUser :one
INSERT INTO users (email, auth_type) 
VALUES ($1, $2  )
RETURNING users.user_id
`

type InsertNewUserParams struct {
	Email    string
	AuthType interface{}
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertNewUser, arg.Email, arg.AuthType)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const updatePass = `-- name: UpdatePass :exec
UPDATE epauth
SET password = $2
WHERE user_id = $1
`

type UpdatePassParams struct {
	UserID   int64
	Password string
}

func (q *Queries) UpdatePass(ctx context.Context, arg UpdatePassParams) error {
	_, err := q.db.Exec(ctx, updatePass, arg.UserID, arg.Password)
	return err
}

const updateSettings = `-- name: UpdateSettings :exec
UPDATE settings
SET 
    last_updated = $2,
    advmeta = $3,
    cmptview = $4,
    rfrshint = $5, 
    notif = $6,
    theme = $7,
    fontsz = $8,
    tooltps = $9,
    shortcuts = $10
WHERE user_id = $1
`

type UpdateSettingsParams struct {
	UserID      int64
	LastUpdated pgtype.Timestamptz
	Advmeta     bool
	Cmptview    bool
	Rfrshint    int16
	Notif       bool
	Theme       string
	Fontsz      int16
	Tooltps     bool
	Shortcuts   bool
}

func (q *Queries) UpdateSettings(ctx context.Context, arg UpdateSettingsParams) error {
	_, err := q.db.Exec(ctx, updateSettings,
		arg.UserID,
		arg.LastUpdated,
		arg.Advmeta,
		arg.Cmptview,
		arg.Rfrshint,
		arg.Notif,
		arg.Theme,
		arg.Fontsz,
		arg.Tooltps,
		arg.Shortcuts,
	)
	return err
}
